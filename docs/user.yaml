components:
  tags:
    name: Users
    description: Users API for seedly app
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      in: header
      bearerFormat: JWT
  schemas:
    User:
      type: object
      required:
        - name
        - email
        - password
      properties:
        name:
          type: string
          description: The name of the user
        email:
          type: string
          description: Unique email of particular user
        password:
          type: string
          description: Hashed password of user
      example:
        name: Rynhardt Smith
        email: rynhardt.smith@gmail.com
        password: test123
    Error:
      type: object
      properties:
        message:
          type: string
          description: The error message
      example:
        message: No users fround
    Errors:
      type: object
      properties:
        errors:
          type: array
          items:
            type: object
            properties:
              msg:
                type: string
                description: Error message
              param:
                type: string
                description: Parameter on body that was invalid
              location:
                type: string
                description: Location of error
      example:
        msg: Invalid value
        param: password
        location: body
    JsonWebToken:
      type: object
      properties:
        token:
          type: string
          description: JSON web token
      example:
        token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI2MDIyZmViNmJkYzQ1MTNlNGE4ZmMwOGIiLCJpYXQiOjE2MTI5MDYxNjYsImV4cCI6MTYxMzUxMDk2Nn0.jiJgdREVujh1uZIhNhQmnzI4CseSCcOVBglbYqSV15E

paths:
  /users/register:
    post:
      summary: Creates a new user, if email is unique and returns JWT token
      tags: [Users]
      requestBody:
        description: Optional description in Markdown
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        200:
          description: Returns json webtoken
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JsonWebToken"
        422:
          description: Returns error, user already exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        400:
          description: Returns error - because body params are invalid
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Errors"

  /users/login:
    post:
      summary: Logs user in and returns a JWT token
      tags: [Users]
      requestBody:
        description: Optional description in Markdown
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        200:
          description: Returns json webtoken
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JsonWebToken"
        422:
          description: Returns error, user already exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        400:
          description: Returns error - because body params are invalid
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Errors"
  /users/current:
    get:
      security:
        - BearerAuth: []
      summary: Returns the authenticated user
      tags: [Users]
      responses:
        200:
          description: user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        404:
          description: No users found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /users:
    get:
      summary: Returns a list of all the users
      tags: [Users]
      responses:
        200:
          description: The list of the users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
        404:
          description: No users found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /users/{id}:
    get:
      summary: Get a user by id
      tags: [Users]
      parameters:
        - in: path
          name: id
          required: true
          description: The user ID
      responses:
        200:
          description: User found with id
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        404:
          description: No user found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /users/password/reset/email:
    post:
      summary: Reset user password by email
      tags: [Users]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  description: Email of user
              example:
                email: rynhardt.smith@gmail.com
      responses:
        200:
          description: Email sent to user to reset password
        404:
          description: No user with that email in database
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /users/password/reset/{token}/{userId}:
    post:
      summary: Reset user password by token
      tags: [Users]
      parameters:
        - in: path
          name: token
          required: true
          description: The reset token
        - in: path
          name: userId
          requiredL: true
          description: The user id
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - password
              properties:
                password:
                  type: string
                  description: New password for user
              example:
                password: test123
      responses:
        200:
          description: Returns json webtoken
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JsonWebToken"
        422:
          description: Token invalid
          content:
          application/json:
            schema:
              $ref: "#/components/schemas/Error"
